/**
 * @project LABYRINTH2015
 * ICP project
 * @class LoadDialog
 * @author xsusov01
 * @email  xsusov01@stud.fit.vutbr.cz
 * @author xbandz00
 * @email  xbandz00@stud.fit.vutbr.cz
 * @file loaddialog.cpp
 * @date 2015/05/10
 * @brief Load dialogue widget
*/

#include "loaddialog.h"
#include "ui_loaddialog.h"

#include "menu.h"
#include "game.h"
#include "widget.h"

/**
 * @brief LoadDialog::LoadDialog constructor
 * @param parent - parent widget
 * @param type - type of parent widget, Menu (true) or Widget (false)
 */
LoadDialog::LoadDialog(QWidget *parent, bool type) :
    QDialog(parent),
    ui(new Ui::LoadDialog)
{
    ui->setupUi(this);
    this->type = type;
}

/**
 * @brief LoadDialog::~LoadDialog destructor (Generated by Qt)
 */
LoadDialog::~LoadDialog()
{
    delete ui;
}

/**
 * @brief LoadDialog::on_lineEdit_textEdited disables "OK button" when input field is empty
 * @param arg1
 */
void LoadDialog::on_lineEdit_textEdited(const QString &arg1)
{
    if (arg1.isEmpty())
        this->ui->load_button->setDisabled(true);
    else
        this->ui->load_button->setEnabled(true);
}

/**
 * @brief LoadDialog::on_close_button_clicked returns to parent widget on cancel, deletes itself
 */
void LoadDialog::on_close_button_clicked()
{
    if (this->type) ((Menu*)parentWidget())->show();
    else ((Widget*)parentWidget())->enable_button("load");

    delete this;
}

/**
 * @brief LoadDialog::on_load_button_clicked loads game from file, kills all old games
 */
void LoadDialog::on_load_button_clicked()
{
    this->hide(); // Hide start as game alfready started adn load game
    Game *game = nullptr;
    try
    {
        game = Game::loadGame(this->ui->lineEdit->displayText().toStdString());
        if (game == nullptr) throw(1);
    }
    catch (...)
    {
        this->ui->message->setText("An error occurred.");
        this->show();
        return;
    }

    // Prepare game main window.
    Widget* game_window = new Widget(0, game->get_game_size(), game);
    game_window->set_buttons();
    game_window->set_labels();
    game_window->set_load_log();
    game_window->change_player_info(game->get_actual_player());

    // Start game.
    game_window->reset_scenes(remove_newlines(game->getBoardStr()),
                              remove_newlines(game->getFreeFieldString()));
    game_window->disable_buttons();
    game_window->show();

    if (!this->type)
    {   // Delete old game.
        delete ((Widget*)parentWidget());
    }
}
